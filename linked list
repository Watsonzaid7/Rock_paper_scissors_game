#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to insert a new node at the end of the linked list
void insert(Node** head, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to delete the last occurrence of a specified item from the linked list
void deleteLastOccurrence(Node** head, int item) {
    if (*head == NULL) {
        return;
    }

    Node* prev = NULL;
    Node* current = *head;
    Node* lastNodeWithItem = NULL;

    while (current != NULL) {
        if (current->data == item) {
            lastNodeWithItem = current;
        }
        prev = current;
        current = current->next;
    }

    if (lastNodeWithItem != NULL) {
        if (lastNodeWithItem == *head) {
            *head = lastNodeWithItem->next;
        } else {
            prev->next = lastNodeWithItem->next;
        }
        free(lastNodeWithItem);
    }
}

// Function to print the linked list
void printList(Node* head) {
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

int main() {
    Node* head = NULL;

    // Insert some nodes into the linked list
    insert(&head, 1);
    insert(&head, 2);
    insert(&head, 3);
    insert(&head, 2);
    insert(&head, 4);
    insert(&head, 2);

    printf("Original linked list: ");
    printList(head);

    // Delete the last occurrence of 2 from the linked list
    deleteLastOccurrence(&head, 2);

    printf("Linked list after deletion: ");
    printList(head);

    return 0;
}
